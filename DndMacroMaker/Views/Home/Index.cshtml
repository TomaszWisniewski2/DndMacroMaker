<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <title>Generator Makr Roll20 (D&D 3.5)</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #222;
            color: #eee;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: #ffd700;
        }

        label {
            font-weight: bold;
        }

        input, button, textarea {
            width: 100%;
            margin-top: 8px;
            margin-bottom: 15px;
            padding: 10px;
            font-size: 14px;
            border-radius: 5px;
            border: none;
        }

        input {
            background: #333;
            color: #fff;
        }

        button {
            background: #28a745;
            color: #fff;
            cursor: pointer;
        }

            button:hover {
                background: #218838;
            }

        textarea {
            background: #111;
            color: #0f0;
            height: 350px;
            resize: vertical;
        }

        /* Kontener pola */
        .form-group {
            margin-bottom: 1rem;
        }

            /* Label */
            .form-group label {
                font-weight: 600;
                color: #f8f9fa; /* jasny tekst */
                display: block;
                margin-bottom: 0.4rem;
            }

        /* Select (dropdown) */
        .form-control {
            background-color: #2b2b2b; /* ciemne tło */
            color: #f8f9fa; /* jasny tekst */
            border: 1px solid #555; /* stonowane obramowanie */
            border-radius: 6px;
            padding: 0.5rem 0.75rem;
            transition: all 0.2s ease-in-out;
        }

            /* Hover i focus */
            .form-control:hover {
                border-color: #a97142; /* brązowo-złoty akcent */
            }

            .form-control:focus {
                border-color: #d4af37; /* złoty akcent */
                box-shadow: 0 0 5px rgba(212, 175, 55, 0.6);
                outline: none;
            }

            /* Opcje dropdowna */
            .form-control option {
                background-color: #2b2b2b;
                color: #f8f9fa;
            }

        .dmg-row {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            align-items: center; /* wyrównanie pionowe */
        }

            .dmg-row input {
                flex: 1;
                min-width: 120px;
            }

            .dmg-row select {
                flex: 0 0 auto;
                width: 60px; /* węższe selecty */
                min-width: 40px;
            }

        /* mały kontener dla label + select */
        .dmg-field {
            display: flex;
            flex-direction: column; /* label nad select */
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <h1>Generator Makr Roll20 (D&D 3.5)</h1>
    <p style="text-align:center; margin-bottom:15px;">
        Źródło zaklęć: <a href="https://dndtools.org/" target="_blank" style="color:#ffd700;">DnDTools</a>
    </p>

    <label for="url">Adres zaklęcia z DnDTools:</label>
    <input type="text" id="url" placeholder="https://dndtools.org/spells/...">
    <button id="fetchBtn">Pobierz dane</button>

    <form id="spellForm" style="margin-top:20px;">

        <label>Name:</label>
        <input type="text" id="name">

        <label>School:</label>
        <div class="form-group mb-3">
            <select id="school" name="school" class="form-control">
                <option value="">-- wybierz szkołę --</option>
                <option value="Abjuration">Abjuration</option>
                <option value="Conjuration">Conjuration</option>
                <option value="Divination">Divination</option>
                <option value="Enchantment">Enchantment</option>
                <option value="Evocation">Evocation</option>
                <option value="Illusion">Illusion</option>
                <option value="Necromancy">Necromancy</option>
                <option value="Transmutation">Transmutation</option>
                <option value="Universal">Universal</option>
            </select>
        </div>


        <label>Spell Level:</label>
        <div class="form-group mb-3">
            <select class="form-control level-value">
                <option value="">-- poziom --</option>
                <option value="0">0</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
            </select>
        </div>

        <label>Components:</label>
        <input type="text" id="components">

        <label>Casting Time:</label>
        <input type="text" id="castingTime">

        <label>Range:</label>
        <input type="text" id="range">

        <label>Target:</label>
        <input type="text" id="target">

        <label>Duration:</label>
        <input type="text" id="duration">

        <label>Saving Throw:</label>
        <input type="text" id="savingThrow">

        <label>Spell Resistance:</label>
        <input type="text" id="spellResistance">

        <label>Tryb obrażeń:</label>
        <select id="dmgMode" class="form-control">
            <option value="">-- wybierz --</option>
            <option value="1">Stała wartość (np. 4d6+10)</option>
            <option value="2">Kości rosną (np. d6 per level)</option>
            <option value="3">Stała kostka + bonus rośnie (np. 1d8 +1/level)</option>
            <option value="4">Kości i bonus rosną</option>
        </select>

        <div id="dmgFields"></div>

        <!-- opcja 1 -->
        <div id="dmg-fixed" class="dmg-section" style="display:none;">
            <label>Obrażenia:</label>
            <input type="text" id="dmgFixed" placeholder="np. 4d6+11">
        </div>

        <!-- opcja 2 -->
        @* <div id="dmg-scaling-dice" class="dmg-section" style="display:none;">
            <label>Typ kostki:</label>
            <input type="text" id="dmgDiceType" placeholder="np. d6">
            <label>Od którego poziomu:</label>
            <input type="number" id="dmgDiceStart" value="1">
            <label>Co ile poziomów:</label>
            <input type="number" id="dmgDiceStep" value="1">
        </div>

        <!-- opcja 3 -->
        <div id="dmg-scaling-bonus" class="dmg-section" style="display:none;">
            <label>Kostka:</label>
            <input type="text" id="dmgStaticDice" placeholder="np. 1d8">dmgNr
            <label>Obrażenia na poziom:</label>
            <input type="number" id="dmgBonusNr" value="1">
            <label>Od którego poziomu bonus:</label>
            <input type="number" id="dmgBonusStart" value="1">
            <label>Co ile poziomów bonus:</label>
            <input type="number" id="dmgBonusStep" value="1">
        </div>

        <!-- opcja 4 -->
        <div id="dmg-scaling-both" class="dmg-section" style="display:none;">
            <label>Typ kostki:</label>
            <input type="text" id="dmgBothDiceType" placeholder="np. d10">
            <label>Od którego poziomu (kostki):</label>
            <input type="number" id="dmgBothDiceStart" value="1">
            <label>Co ile poziomów (kostki):</label>
            <input type="number" id="dmgBothDiceStep" value="1">

            <label>Liczba kostek start:</label>
            <input type="number" id="dmgBothCountStart" value="1">
            <label>Obrażenia na poziom:</label>
            <input type="number" id="dmgBonusNr" value="1">
            <label>Od którego poziomu (liczba):</label>
            <input type="number" id="dmgBothCountLevel" value="1">
            <label>Co ile poziomów (liczba):</label>
            <input type="number" id="dmgBothCountStep" value="1">
        </div> *@

        <label>Limit obrażeń (opcjonalnie):</label>
        <input type="number" id="dmgCap" placeholder="np. 10 dla max 10d6">

        <label>Opis:</label>
        <textarea id="description"></textarea>

        <button type="button" id="generateBtn">Generuj makro</button>
    </form>

    <label for="result">Wygenerowane makro:</label>
<textarea id="result" readonly></textarea>

    <script>
        const dmgModeSelect = document.getElementById("dmgMode");
        const dmgFields = document.getElementById("dmgFields");

                dmgModeSelect.addEventListener("change", () => {
            const mode = dmgModeSelect.value;
            let html = "";

                        function generateLevelSelect(id, defaultValue = "") {
                        let html = `<select id="${id}" class="form-control level-value">`;
                        for (let i = 0; i <= 20; i++) {
                            const selected = (i.toString() === defaultValue) ? " selected" : "";
                            html += `<option value="${i}"${selected}>${i}</option>`;
                        }
                        html += `</select>`;
                        return html;
                    }
            if (mode === "1") {
                html = `
                  <div class="dmg-row">
                    <input id="dmgFormula" placeholder="np. 4d6+10">
                  </div>`;
            }
            if (mode === "2") {
                      html = `
                    <div class="dmg-row">
                      <input id="dmgFormula" placeholder="np. d10">
                      <p>Od poziomu:</p> ${generateLevelSelect("dmgStart", "0")}
                      <p>Co </p>${generateLevelSelect("dmgStep",  "1")} <p> poziom</p>
                    </div>`;
            }
            if (mode === "3") {
                html = `
                  <div class="dmg-row">
                    <input id="dmgFormula" placeholder="np. 1d8">
                  </div>
                  <div class="dmg-row">
                    <input type="number" id="dmgNr"  placeholder="obrażenia na lv np 1">
                    <p>Od poziomu:</p>${generateLevelSelect("dmgStart2", "0")}
                    <p>Co </p>${generateLevelSelect("dmgStep2",  "1")} <p> poziom</p>
                  </div>`;
            }
            if (mode === "4") {
                      html = `
                    <div class="dmg-row">
                        <input id="dmgFormula" placeholder="np. d10">
                        <p>Od poziomu:</p> ${generateLevelSelect("dmgStart",  "0")}
                        <p>Co </p>${generateLevelSelect("dmgStep",  "1")} <p> poziom</p>
                        </div>
                        <div class="dmg-row">
                        <input type="number" id="dmgNr"  placeholder="obrażenia na lv np 1">
                        <p>Od poziomu:</p>${generateLevelSelect("dmgStart2",  "0")}
                        <p>Co </p>${generateLevelSelect("dmgStep2",  "1")} <p> poziom</p>
                    </div>`;
            }

            dmgFields.innerHTML = html;
        });


        //     document.getElementById('dmgType').addEventListener('change', function() {
        //     document.querySelectorAll('.dmg-section').forEach(div => div.style.display = 'none');
        //     const selected = this.value;
        //     document.getElementById('dmg-' + selected).style.display = 'block';
        // });
        document.getElementById('fetchBtn').addEventListener('click', async () => {
            const url = document.getElementById('url').value.trim();
            if (!url) {
                alert("Podaj link do zaklęcia!");
                return;
            }

            try {
                const res = await fetch(`/api/scraper/raw?url=${encodeURIComponent(url)}`);
                if (!res.ok) throw new Error("Błąd pobierania danych");

                const spell = await res.json();

                // wypełnij formularz
                document.getElementById('name').value = spell.name || "";

                // szkoła
                const schoolSelect = document.getElementById('school');
                if (schoolSelect) {
                    schoolSelect.value = spell.school ? spell.school : "";
                }

                // poziomy (pierwszy select .level-value)
                const levelSelect = document.querySelector('.level-value');
                if (levelSelect) {
                    // jeśli spell.levels jest stringiem np. "Wizard 3"
                    // wyciągamy pierwszą liczbę i ustawiamy select
                    if (spell.levels) {
                        const match = spell.levels.match(/\d+/);
                        levelSelect.value = match ? match[0] : "";
                    } else {
                        levelSelect.value = "";
                    }
                }

                document.getElementById('components').value = spell.components || "";
                document.getElementById('castingTime').value = spell.castingTime || "";
                document.getElementById('range').value = spell.range || "";
                document.getElementById('target').value = spell.target || "";
                document.getElementById('duration').value = spell.duration || "";
                document.getElementById('savingThrow').value = spell.savingThrow || "";
                document.getElementById('spellResistance').value = spell.spellResistance || "";
                document.getElementById('description').value = spell.description || "";

            } catch (err) {
                console.error(err);
                alert("Wystąpił błąd: " + err.message);
            }
        });

               document.getElementById('generateBtn').addEventListener('click', async () => {
            const levelSelect = document.querySelector('.level-value');
            const levelStr = levelSelect ? levelSelect.value : "";

            const dmg = document.getElementById('dmg') ? document.getElementById('dmg').value.trim() : "";
            const dmgScale = document.getElementById('dmgScale') ? document.getElementById('dmgScale').value : "0";
            const dmgCap = document.getElementById('dmgCap') ? document.getElementById('dmgCap').value.trim() : "";

            function toNullableInt(id) {
            const val = document.getElementById(id)?.value;
            return val && !isNaN(val) ? parseInt(val) : null;
            }

                const spell = {
                    url: document.getElementById('url').value,
                    name: document.getElementById('name').value,
                    school: document.getElementById('school').value,
                    levels: levelStr,
                    components: document.getElementById('components').value,
                    castingTime: document.getElementById('castingTime').value,
                    range: document.getElementById('range').value,
                    target: document.getElementById('target').value,
                    duration: document.getElementById('duration').value,
                    savingThrow: document.getElementById('savingThrow').value,
                    spellResistance: document.getElementById('spellResistance').value,
                    description: document.getElementById('description').value,

                    dmgMode: document.getElementById("dmgMode").value,
                    dmgFormula: document.getElementById("dmgFormula")?.value || null,
                    dmgStart: document.getElementById("dmgStart")?.value || null,
                    dmgStep: document.getElementById("dmgStep")?.value || null,
                    dmgStart2: document.getElementById("dmgStart2")?.value || null,
                    dmgStep2: document.getElementById("dmgStep2")?.value || null,
                    dmgCap: document.getElementById("dmgCap")?.value || null,
                    dmgNr: document.getElementById("dmgNr")?.value || null,

                    dmgStart: toNullableInt("dmgStart"),
                    dmgStep: toNullableInt("dmgStep"),
                    dmgStart2: toNullableInt("dmgStart2"),
                    dmgStep2: toNullableInt("dmgStep2"),
                    dmgCap: toNullableInt("dmgCap"),
                    dmgNr: toNullableInt("dmgNr"),


                };

            try {
                const res = await fetch(`/api/scraper/generate`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(spell)
                });

                if (!res.ok) throw new Error("Błąd generowania makra");
                document.getElementById('result').value = await res.text();
            } catch (err) {
                console.error(err);
                alert("Wystąpił błąd: " + err.message);
            }
        });

    </script>
</body>
</html>
